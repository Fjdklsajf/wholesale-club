#ifndef DATE_H_
#define DATE_H_

#include <string>
#include <iostream>

class Date {
  public:
    static Date getCurrentDate();
    /******************************
     ** CONSTRUCTOR & DESTRUCTOR **
     ******************************/
    Date();
    Date(int date, int month, int year);
    Date(const Date& d);

    /**************
     ** MUTATORS **
     **************/
    void setDate(const Date& d);

    /***************
     ** ACCESSORS **
     ***************/
    int getDate() const;
    int getMonth() const;
    int getYear() const;

    /***********************************
     ** MODIFICATION MEMBER FUNCTIONS **
     ***********************************/
    Date& operator++(int);
    void setNull();
    void operator =(const Date& d);

    /*******************************
     ** CONSTANT MEMBER FUNCTIONS **
     *******************************/
    bool verifyDate() const;
    std::string dayOfWeek() const;
    bool operator ==(const Date& d) const;
    bool operator !=(const Date& d) const;
    bool operator >(const Date& d) const;
    bool operator <(const Date& d) const;
    bool operator >=(const Date& d) const;
    bool operator <=(const Date& d) const;
    std::string printDate() const;
    std::string printMonth() const;

  private:
    int _date, _month, _year;

    friend std::ostream& operator<<(std::ostream& os, const Date& d);
    bool isLeapYear() const;
    int getCenturyValue() const;
    int getYearValue() const;
    int getMonthValue() const;
};
/******************************************************************************************
 *  Date Class
 *    A Date with date, month, and year(from 1080 to 2080)
 ******************************************************************************************/


/******************************
 ** CONSTRUCTOR & DESTRUCTOR **
 ******************************/

/******************************************************************************************
 *  Date()
 *    Default Constructor; Creates a "null" Date, set _date, _month, _year to 0
 *    Parameters: none
 *    Return: void
 ******************************************************************************************/

/******************************************************************************************
 *  Date(int date, int month, int year)
 *    Constructor; Initialize member variables with the given parameters
 *    Parameters: int, int, int
 *    Return: void
 ******************************************************************************************/

/******************************************************************************************
 *  Date(const Date& d)
 *    Copy Constructor; Set the current Date equal to the given parameter Date
 *    Parameters: const Date&
 *    Return: void
 ******************************************************************************************/


/**********************
 ** STATIC FUNCTIONS **
 **********************/

/******************************************************************************************
 *  Date getCurrentDate();
 *
 *    Return a Date with current system dates
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: Date
 ******************************************************************************************/


/**************
 ** MUTATORS **
 **************/

/******************************************************************************************
 *  void setDate(const Date& d);
 *
 *    Mutator; This method will update the _date, _month, and _year attributes to the
 *      parameter Date values
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: void
 ******************************************************************************************/


/***************
 ** ACCESSORS **
 ***************/

/******************************************************************************************
 *  int getDate() const;
 *
 *    Accessor; This method will return _date
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/

/******************************************************************************************
 *  int getMonth() const;
 *
 *    Accessor; This method will return _month
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/

/******************************************************************************************
 *  int getYear() const;
 *
 *    Accessor; This method will return _year
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/


/***********************************
 ** MODIFICATION MEMBER FUNCTIONS **
 ***********************************/

/******************************************************************************************
 *  Date& operator++(int);
 *
 *    Operator Overload; Increment the current Date by one
 * ----------------------------------------------------------------------------------------
 *    Parameters: int
 * ----------------------------------------------------------------------------------------
 *    Return: Date&
 ******************************************************************************************/

/******************************************************************************************
 *  void setNull();
 *
 *    Set the current Date to "null", _date, _month, _year to 0
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: void
 ******************************************************************************************/

/******************************************************************************************
 *  Date& operator =(const Date& d);
 *
 *    Operator Overload; Set the current Date to the given parameter Date
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: Date&
 ******************************************************************************************/


/*******************************
 ** CONSTANT MEMBER FUNCTIONS **
 *******************************/

/******************************************************************************************
 *  bool verifyDate() const;
 *
 *    Return true if the current Date is a valid date, false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  std::string dayOfWeek() const;
 *
 *    Return the day of the week based on the current Date. Use private functions
 *    isLeapYear(), getCenturyValue(), getYearValue(), and getMonthValue()
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: std::string
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator ==(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date matches the given parameter Date,
 *      false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator !=(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date does not matche the given parameter
 *      Date, false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator >(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date comes after the given parameter Date,
 *      false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator <(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date comes before the given parameter Date,
 *      false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator >=(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date matches or comes after the given
 *      parameter Date, false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  bool operator <=(const Date& d) const;
 *
 *    Operator Overload; Return true if the current Date matches or comes before the given
 *      parameter Date, false otherwise
 * ----------------------------------------------------------------------------------------
 *    Parameters: const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  std::string printDate() const;
 *
 *    Return a string of the current Date in the format of: xx/yy/zz    dayOfWeek,
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: std::string
 ******************************************************************************************/

/******************************************************************************************
 *  std::string printMonth() const;
 *
 *    Return a string of the current month
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: std::string
 ******************************************************************************************/


/*******************************
 ** PRIVATE MEMBER FUNCTIONS **
 *******************************/

/******************************************************************************************
 *  friend std::ostream& operator<<(std::ostream& os, const Date& d);
 *
 *    Operator Overload; prints the current Date in the format of: xx/yy/zz    dayOfWeek,
 *      No new line '\n' at the end
 * ----------------------------------------------------------------------------------------
 *    Parameters: std::ostream&, const Date&
 * ----------------------------------------------------------------------------------------
 *    Return: std::ostream&
 ******************************************************************************************/

/******************************************************************************************
 *  bool isLeapYear() const;
 *
 *    Return true if the year is a leap year, false other wise, used to calculate dayOfWeek()
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************************/

/******************************************************************************************
 *  int getCenturyValue() const;
 *
 *    No special meaning except used to calculate dayOfWeek()
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/

/******************************************************************************************
 *  int getYearValue() const;
 *
 *    No special meaning except used to calculate dayOfWeek()
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/

/******************************************************************************************
 *  int getMonthValue() const;
 *
 *    No special meaning except used to calculate dayOfWeek()
 * ----------------------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************************/


#endif // DATE_H_
